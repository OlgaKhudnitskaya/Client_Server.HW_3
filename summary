1) Прочитать про клиент-серверную архитектуру
 Архитектура «клиент-сервер» определяет общие принципы организации взаимодействия в сети, где имеются серверы, узлы-поставщики некоторых специфичных функций (сервисов) и
клиенты (потребители этих функций).
 Клиент – это не живой человек. В нашем случае – это браузер (Chrome, Opera, Safari), если мы говорим про web, и программа на компьютере, если говорим про desktop.
 Сервер – это некое хранилище нужной (или не очень) информации и внутреннее устройство приложения. Сюда за информацией обращается клиент.
 А еще есть база данных – что-то вроде упорядоченных полок в библиотеке, куда обращается сервер, получивший запрос от клиента. 
Пользователь отправляет определенный запрос на сервер, где тот системно обрабатывается и конечный результат отсылается клиенту.

2) Что такое HTTP и HTTPS 
Протокол - набор правил передачи информации. Т.е. с помощью протокола мы регламентируем, как наша информация будет передеваться в сети интернет
 HTTP (HyperText Transfer Protocol — протокол передачи гипертекста) — это прикладной протокол передачи данных в сети. 
На текущий момент используется для получения информации с веб-сайтов. Протокол HTTP основан на использовании технологии «клиент-сервер»: клиент, отправляющий запрос, 
является инициатором соединения; сервер, получающий запрос, выполняет его и отправляет клиенту результат.
 HTTPS (HyperText Transfer Protocol Secure) — расширение протокола HTTP для поддержки шифрования в целях повышения безопасности. 
Данные в протоколе HTTPS передаются поверх криптографических протоколов TLS или устаревшего в 2015 году SSL
В отличие от HTTP с TCP-портом 80, для HTTPS по умолчанию используется TCP-порт 443.

3) HTTP методы
 HTTP определяет множество методов запроса, которые указывают, какое желаемое действие выполнится для данного ресурса. 
 1. Метод GET запрашивает содержимое приложения. Запросы с использованием этого метода могут только извлекать данные.
В рамках GET-запроса некоторые данные могут быть переданы в строке запроса URI, указывающие, например, условия поиска, диапазоны дат, или другую информацию, 
определяющую запрос.
 2. Метод POST передает пользовательские данные заданному ресурсу.Он часто используется для загрузки файла или представления заполненной веб-формы.
В рамках POST запроса произвольное количество данных любого типа может быть отправлено на сервер в теле сообщения запроса. 
 3. Метод PUT создаёт новый ресурс или заменяет представление целевого ресурса, данными представленными в теле запроса.
PUT является идемпотентным: повторное его применение даёт тот же результат, что и при первом применении (то есть у метода нет побочных эффектов), 
тогда как повторный вызов одного и того же метода POST может иметь такие эффекты, как например, оформление одного и того же заказа несколько раз.
 4. Метод PATCH частично изменяет ресурс.
 
4) HTTP статус коды сервера
 Код состояния HTTP (англ. HTTP status code) — это трёхзначное число, с которого начинается любой ответ сервера на запрос по протоколу HTTP. 
 Код кратко сообщает суть ответа — был ли выполнен запрос или возникла ошибка.
 Коды ответов HTTP делятся на пять классов. В каждом из них объединены сообщения с похожими значениями. Вот краткие описания каждого из классов:
1хх — информационные коды. Сообщают о прогрессе выполнения запроса. На практике практически не встречаются.
 100 Continue
 101 Switching Protocols
 103 Early Hints («Предварительные данные»)
2хх — коды успешно выполненных запросов. Сообщают о том, что всё в порядке и работает, как ожидалось.
 200 OK 
 201 Created
 202 Accepted («Принято»)
 203 Non-Authoritative Information («Неофициальная информация»)
 204 No Content («Нет содержимого»)
 205 Reset Content («Сбросить содержимое»)
3хх — коды перенаправлений. Сообщают о том, что запрашиваемая страница переехала и нужно сделать ещё один запрос по новому URL.
 300 Multiple Choices («Множественный выбор»)
 301 Moved Permanently («Перемещено навсегда»)
 302 Found («Найдено»)
 304 Not Modified — «Не изменено». Запрашиваемый ресурс не был изменён, поэтому стоит использовать его кэшированную версию.
4хх — коды ошибок клиента. Сообщают об ошибке на стороне пользователя, который отправил запрос.
 400 Bad Request — «Неверный запрос»
 401 Unauthorized — «Неавторизованно»
 402 Payment Required — «Необходима оплата»
 403 Forbidden — «Запрещено»
 404 Not Found — «Не найдено»
 405 Method Not Allowed — «Метод запрещён»
5хх — коды ошибок сервера. Сообщают об ошибке на стороне сервера, который обрабатывал запрос.
 500 Internal Server Error — «Внутренняя ошибка сервера»
 501 Not Implemented — «Не реализовано»
 502 Bad Gateway — «Неверный шлюз»
 503 Service Unavailable — «Сервис недоступен»
 504 Gateway Timeout — «Шлюз не отвечает»
 505 HTTP Version Not Supported
 
5) Что такое ядро браузера 
Это машина, котрая распознает и начинает выполнять JS, парсит HTML (он прочитывает его, понимает что с ним делать и делает)
Браузер = оболочка + ядро
Ядро браузера можно разделить на две части: движок рендеринга (инженер макета или движок рендеринга) и движок JS.
Механизм рендеринга. Он отвечает за получение содержимого веб-страницы (HTML, XML, изображения и т. д.), 
организацию информации (например, добавление CSS и т. д.) и вычисление режима отображения веб-страницы, а затем вывод на монитор или принтер. 
Разница в ядре браузера будет по-разному интерпретировать синтаксис веб-страницы, поэтому эффект рендеринга также будет другим.
Механизм JS анализирует язык Javascript и выполняет язык Javascript для достижения динамического эффекта веб-страницы.

6) Какие браузеры какиие ядра используют
Trident(IEЯдро)
Представители: IE, Maxthon, Window of the World Browser, Avant, Tencent TT, Cheetah Secure Browser, 360 Speed Browser, Baidu Browser и др.
После выпуска Window10 IE назвал свой встроенный браузер Edge, наиболее заметной особенностью Edge является новое ядро EdgeHTML.

Gecko(firefox)
Gecko (ядро Firefox): Mozilla FireFox (браузер Firefox)

webkit(Safari)

Chromium/Bink(chrome)

7) Что такое API
Application Programming Interface (программный интерфейс приложения) - способ взаимодействия одной системы с другой -
это составляющая часть сервера, которая получает запросы и отправляет ответы.
Проще говоря, это набор компонентов, с помощью которых компьютерная программа (бот или же сайт) может взаимодействовать с другой программой (API).
1. Вызов операции - метод GET, POST
2. Входные данные - HTTP Request
3. Выходные данные - HTTP Response

8) Что такое ендпоинты
Эндпоинт (англ. — конечная точка) представляет собой некий шлюз, который соединяет серверные процессы приложения с внешним интерфейсом. 
Простыми словами, это адрес, на который отправляются сообщения.
Каждый api-сервис имеет endpoint, к которому и нужно обращаться, например отправлять http-запрос. Обычно это url. Т.о. endpoint - это url. 
Или такая url включает в себя маршрут (основная часть адреса сервиса) и endpoint (часть url, которая содержит например имя вызываемого метода). 
Существует один маршрут и у него несколько эндпоинтов. Т.о. здесь endpoint - это только часть url.

9) URL (URI, URL, URN)
URL - Uniform Resource Locator (унифицированный определитель местонахождения ресурса)
URN - Unifrorm Resource Name (унифицированное имя ресурса)
URI - Uniform Resource Identifier (унифицированный идентификатор ресурса)

10) Идемпотентные HTTP методы
Метод HTTP является идемпотентным, если повторный идентичный запрос, сделанный один или несколько раз подряд, имеет один и тот же эффект,
не изменяющий состояние сервера. Другими словами, идемпотентный метод не должен иметь никаких побочных эффектов (side-effects),
кроме сбора статистики или подобных операций. Корректно реализованные методы GET, HEAD, PUT и DELETE идемпотентны, но не метод POST.
Также все безопасные методы являются идемпотентными.

11) Безопасные HTTP методы
Метод HTTP является безопасным, если он не меняет состояние сервера. Другими словами, безопасный метод проводит операции "только чтение" (read-only). 
Несколько следующих методов HTTP безопасные: GET, HEAD или OPTIONS. 
Все безопасные методы являются также идемпотентными, как и некоторые другие, но при этом небезопасные, такие как PUT или DELETE.

12) Идентификация, Аутентификация, Авторизация
Идентификация — это процедура распознавания субъекта по его идентификатору (проще говоря, это определение имени, логина или номера).
Идентификация выполняется при попытке войти в какую-либо систему (например, в операционную систему или в сервис электронной почты).

После идентификации производится аутентификация: это процедура проверки подлинности(пользователя проверяют с помощью пароля, письмо проверяют по электронной подписи и т.д.)

Когда определили ID, проверили подлинность, уже можно предоставить и доступ, то есть, выполнить авторизацию.
Авторизация – это предоставление доступа к какому-либо ресурсу (например, к электронной почте).

13) Что такое IP

14) Что такое октаты в DNS
15) Что такое порт, сколько портов у Linux сервера

16) Уровни OSI
 Модель OSI (или Open System Interconnection) характеризует взаимодействие сетевого оборудования.
 В OSI модели выделяют 7 уровней: 
1. Физический (Physical) - занимается непосредственно передачей информации. Один из основных стандартов среди технологий физического уровня – Ethernet.
2. Канальный уровень (Data Link) - после получения сигнала с предыдущего физического уровня, на следующем (канальном) уровне происходит проверка и 
исправление погрешностей передачи. 
В нём условно выделяют следующие подуровни управления: LLC (логическим каналом)и MAC (доступом к среде)
Устройствами второго, канального, уровня считаются мосты и коммутаторы.
3. Сетевой уровень (Network) - на этой ступени вводятся понятия «маршрутизация» и «IP-адрес». Для трансформации MAC-адресов в IP применяется протокол ARP.
Устройствами здесь являются роутер или маршрутизатор
4. Транспортный уровень (Transport) - происходит доставка информации по каналам внешней сети. Блоки данных в данном случае делятся на отдельные фрагменты, 
размеры которых будут зависеть от используемого протокола. Для транспортного уровня это TCP и UDP.
5. Сеансовый уровень (Session) - отвечает за создание и окончание сеанса, обмен данными, за синхронизацию и другие процессы.
К протоколам сеансового уровня, например, относятся X.225, ISO 8327, SMPP (через него отправляются СМС сообщения), PAP.
6. Уровень представления (Presentation) - осуществляется преобразование форматов данных, например, сжатие и кодирование.
7. Уровень прикладной (Application) - располагаются сетевые службы, с которыми напрямую взаимодействуют пользователи. 
Данный уровень описывает взаимосвязь приложений на ПК и внешней сети. Сюда относятся протоколы для просмотра страниц в интернете (HTTPS, HTTP), 
для работы с почтовыми службами (SMTP, POP3), для передачи файлов (FTP, TFTP) и другие.

 17) Хедеры http запросов
Заголовки HTTP (англ. HTTP Headers) - это служебная информация, здесь описывается, как основная часть должна передаваться
Это строки в HTTP-сообщении, содержащие разделённую двоеточием пару имя-значение. 
